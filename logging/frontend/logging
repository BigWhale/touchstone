upstream backend  {
    {SERVERS_INFO}
}

server {
    listen 80;

    # declare proxy params and values to forward to your gunicorn webserver
    proxy_pass_request_headers on;
    proxy_pass_request_body on;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_read_timeout 1200s;
    client_max_body_size 200M;

    set $my_host $host;
      # if the host header is an ip address change it to www.mysite.com
      # this works around requests coming from ELB with either the instance's
      # internal ip address in the case of health checks or an unknown internal
      # ip address in the case of latency checks. translating them to a known
      # good host header makes django's ALLOWED_HOSTS happy
      if ($host ~ "\d+\.\d+\.\d+\.\d+") {
          set $my_host "foobar-fqdn.rackspace.com";
      }
    
    location / {
        # here is where you declare that every request to / 
        # should be proxy to 127.0.0.1:8000 (which is where
        # your gunicorn will be running on)          
        proxy_pass_header Server;
        # proxy_set_header Host $http_host;
        proxy_set_header Host $my_host;
        proxy_redirect off;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Scheme $scheme;
        proxy_connect_timeout 1200s;
        proxy_read_timeout 1200s;

        proxy_pass http://backend; # the actual nginx directive to 
                                           # forward the request
    }
}
